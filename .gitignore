pip install azure-storage-file-datalake azure-identity
pip install azure-mgmt-storage azure-mgmt-resource azure-identity
pip install azure-identity azure-mgmt-resource

import os
from azure.identity import DefaultAzureCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.storage import StorageManagementClient
from azure.mgmt.storage.models import StorageAccountCreateParameters, Sku, Kind
from azure.core.exceptions import ResourceNotFoundError
from azure.storage.blob import BlobServiceClient, ContainerClient
from azure.storage.blob import BlobClient

# Define a function to load secrets from the file  # Setting my subscription ID
def load_secrets(filename):
    secrets = {}
    with open(filename, 'r') as file:
        for line in file:
            # Remove whitespace and split key-value pair
            line = line.strip()
            if "=" in line:
                key, value = line.split("=", 1)
                secrets[key.strip()] = value.strip()
    return secrets

# Load the secrets
secrets = load_secrets('secrets.txt')

# Access the subscription_id
subscription_id = secrets.get('subscription_id')

print(f"Your subscription ID is: {subscription_id}")


resource_group_name = 'decgrouptest'   # Define the resource group name and location
storage_account_name = 'decstorageblob'
location = 'southafricanorth'
container_name = 'annualenterprisesurvey'  # This acts as a directory
# Define the local file path and the blob name
local_file_path = r"C:\Users\adebola.adesoyin\OneDrive - Avon Healthcare Ltd\Course+Resources\Desktop\Mine\Data Engineering\annual-enterprise-survey-2023-financial-year-provisional.csv"
blob_name = 'annualdatasurvey_file'

credential = DefaultAzureCredential()  # Creating a credential using DefaultAzureCredential

resource_client = ResourceManagementClient(credential, subscription_id)  # Create the Resource Management client

storage_client = StorageManagementClient(credential, subscription_id)   # Initialize the storage management client

# try:
#     resource_group = resource_client.resource_groups.get(resource_group_name)  # To Check if the resource group exists
#     print("This resource group already existed.")

# except ResourceNotFoundError:
#     resource_client.resource_groups.create_or_update(     # If the resource group does not exist, create it
#          resource_group_name,
#          {
#              "location": location
#          }
#      )
#     print(f"Resource group '{resource_group_name}' has been created in location '{location}'.")

# try:  # Check if the storage account exists
#     storage_account = storage_client.storage_accounts.get_properties(resource_group_name, storage_account_name)
#     print(f"Storage account '{storage_account_name}' already exists in resource group '{resource_group_name}'.")

# except ResourceNotFoundError:
#     storage_async_operation = storage_client.storage_accounts.begin_create(  # If the storage account does not exist, create it
#         resource_group_name,
#         storage_account_name,
#         StorageAccountCreateParameters(
#             sku=Sku(name="Standard_GRS"),
#             kind=Kind.STORAGE_V2,
#             location=location
#         )
#     )
#     storage_account = storage_async_operation.result()
#     print(f"Storage account '{storage_account_name}' has been created in location '{location}'.")

# except Exception as e:
#     print(f"An error occurred while checking or creating the storage account: {e}") # Handle other exceptions

#Create the BlobServiceClient object
blob_service_client = BlobServiceClient(account_url=f"https://{storage_account_name}.blob.core.windows.net/", credential=credential)

# Create a container (directory) if it doesn't already exist
# try:
#     container_client = blob_service_client.create_container(container_name)
#     print(f"Container '{container_name}' has been created.")
# except Exception as e:
#     print(f"An error occurred: {e}")


# Create a BlobClient to interact with the blob (file)
blob_client = blob_service_client.get_blob_client(container=container_name, blob=blob_name)

# Upload the file
try:
    with open(local_file_path, "rb") as data:
        blob_client.upload_blob(data, overwrite=True)
    print(f"File '{blob_name}' has been uploaded to container '{container_name}'.")
except Exception as e:
    print(f"An error occurred while uploading the file: {e}")
